import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs";

// 배너 설정
const banner =
	`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

// production 여부 확인
const prod = (process.argv[2] === "production");

// 출력 디렉토리 설정
const outdir = "dist";

// 출력 디렉토리 생성 (없으면 생성)
if (!fs.existsSync(outdir)) {
	fs.mkdirSync(outdir, { recursive: true });
}

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins,
	],
	format: "cjs",
	target: "es2020",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outdir, // dist 디렉토리로 번들 출력
});

if (prod) {
	await context.rebuild(); // 프로덕션 모드에서 빌드
	process.exit(0);
} else {
	await context.watch(); // 개발 모드에서 watch
}
